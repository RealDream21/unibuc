#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <bits/stdc++.h>
using namespace std;


//PENTRU OPTIMIZARE DE INCEPUT DINTR O COADA CU TOATE NODURILE SAU DOAR DIN MARGINI SI NU TREC DE 2 ORI PESTE ACELASI

class Solution {
    vector<vector<int>> seen[2000];
    void mapIsland(int i, int j, vector<vector<int>>& grid){
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid.size())
            return;
        if(grid[i][j] == 2 || grid[i][j] == 0)
            return;
        if(grid[i][j] == 1)
            grid[i][j] = 2;
        mapIsland(i + 1, j, grid);
        mapIsland(i, j + 1, grid);
        mapIsland(i - 1, j, grid);
        mapIsland(i, j - 1, grid);
    }

    int searchBridge(int i, int j, vector<vector<int>>& grid, int length){
        //cout << i << " " << j << endl;
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid.size())
            return INT_MAX;
        if(seen[i][j] == 1)
            return INT_MAX;
        if(grid[i][j] == 2)
            return INT_MAX;
        if(grid[i][j] == 1)
            return length;
        seen[i][j] = true;
        length++;
        int sus = searchBridge(i - 1, j, grid, length, seen);
        int jos = searchBridge(i + 1, j, grid, length, seen);
        int stanga = searchBridge(i, j - 1, grid, length, seen);
        int dreapta = searchBridge(i, j + 1, grid, length, seen);
        seen[i][j] = false;
        return min({sus, jos, stanga, dreapta});
    }

public:
    int shortestBridge(vector<vector<int>>& grid) {
        bool mapped = false;
        int starti, startj;
        for(int i = 0; i < grid.size(); i++)
        {
            for(int j = 0; j < grid[i].size(); j++)
                if(grid[i][j] != 0)
                {
                    mapIsland(i, j, grid);
                    mapped = true;
                    starti = i;
                    startj = j;
                    break;
                }
            if(mapped == true)
                break;
        }
        int min_bridge = grid.size();
        for(int i = 0; i < grid.size(); i++)
        {
            for(int j = 0; j < grid[i].size(); j++)
            {
                if(grid[i][j] == 2)
                {
                    if((i > 0 && j > 0 && i < grid.size() - 1 && j < grid.size() - 1) && !(grid[i - 1][j] == 0 || grid[i + 1][j] == 0 || grid[i][j - 1] == 0 || grid[i][j + 1] == 0))
                        continue;

                    int sus = searchBridge(i - 1, j, grid, 0;
                    seen.clear();
                    int jos = searchBridge(i + 1, j, grid, 0);
                    seen.clear();
                    int stanga = searchBridge(i, j - 1, grid, 0);
                    seen.clear();
                    int dreapta = searchBridge(i, j + 1, grid, 0);
                    seen.clear();
                    min_bridge = min({min_bridge, sus, jos, stanga, dreapta});
                }
            }
        }

        return min_bridge;
    }
};

int main()
{
    Solution p;
    vector<vector<int>> grid = {{0,0,0,1,1,0,0},{0,0,0,1,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,1,1,0,0,0,0}};
    cout << p.shortestBridge(grid);

    return 0;
}
